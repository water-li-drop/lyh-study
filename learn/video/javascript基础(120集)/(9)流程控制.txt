程序的三种基本结构

1.顺序结构

    从上到下执行的代码就是顺序结构

    程序默认就是由上到下顺序执行的

2.分支结构

    根据不同的情况，执行对应代码
    (1)if语句

        语法结构

            if (/* 条件表达式 */) {
            // 执行语句
            }
            
            if (/* 条件表达式 */){
            // 成立执行语句
            } else {
            // 否则执行语句
            }
            
            if (/* 条件1 */){
            // 成立执行语句
            } else if (/* 条件2 */){
            // 成立执行语句
            } else if (/* 条件3 */){
            // 成立执行语句
            } else {
            // 最后默认执行语句
            }

    (2)三元运算符

        表达式1 ? 表达式2 : 表达式3
        是对if……else语句的一种简化写法

    (3)switch语句

        语法格式:

            switch (expression) {
            case 常量1:
                语句;
                break;
            case 常量2:
                语句;
                break;
            case 常量3:
                语句;
                break;
            …
            case 常量n:
                语句;
                break;
            default:
                语句;
                break;
            }

            break可以省略，如果省略，代码会继续执行下一个case
            switch 语句在比较值时使用的是全等操作符, 因此不会发生类型转换（例如，字符串'10' 不等于数值 10）
        

3.循环结构

    循环结构：重复做一件事情
    在javascript中，循环语句有三种，while、do..while、for循环。

    1.while语句

        基本语法：

            // 当循环条件为true时，执行循环体，
            // 当循环条件为false时，结束循环。
            while (循环条件) {
            //循环体
            }

    代码示例：

        // 计算1-100之间所有数的和
        // 初始化变量
        var i = 1;
        var sum = 0;
        // 判断条件
        while (i <= 100) {
        // 循环体
        sum += i;
        // 自增
        i++;
        }
        console.log(sum);

    2.do...while语句

        do..while循环和while循环非常像，二者经常可以相互替代，但是do..while的特点是不管条件成不成立，都会执行一次。

        基础语法：

            do {
            // 循环体;
            } while (循环条件);

        代码示例：

            // 初始化变量
            var i = 1;
            var sum = 0;
            do {
            sum += i;//循环体
            i++;//自增
            } while (i <= 100);//循环条件

    3.for语句

        while和do...while一般用来解决无法确认次数的循环。for循环一般在循环次数确定的时候比较方便

        for循环语法：

            // for循环的表达式之间用的是;号分隔的，千万不要写成,
            for (初始化表达式1; 判断表达式2; 自增表达式3) {
            // 循环体4
            }

        执行顺序：1243  ----  243   -----243(直到循环条件变成false)

        1. 初始化表达式
        2. 判断表达式
        3. 自增表达式
        4. 循环体

        案例：

            打印1-100之间所有数
            求1-100之间所有数的和
            求1-100之间所有数的平均值
            求1-100之间所有偶数的和
            同时求1-100之间所有偶数和奇数的和
            打印正方形
            // 使用拼字符串的方法的原因
            // console.log 输出重复内容的问题
            // console.log 默认输出内容介绍后有换行
            var start = '';
            for (var i = 0; i < 10; i++) {
            for (var j = 0; j < 10; j++) {
                start += '* ';
            }
            start += '\n';
            }
            console.log(start);
            打印直角三角形
            var start = '';
            for (var i = 0; i < 10; i++) {
            for (var j = i; j < 10; j++) {
                start += '* ';
            }
            start += '\n';
            }
            console.log(start);
            
            打印9*9乘法表
            var str = '';
            for (var i = 1; i <= 9; i++) {
            for (var j = i; j <=9; j++) {
                str += i + ' * ' + j + ' = ' + i * j + '\t';
            }
            str += '\n';
            }
            console.log(str);
            

    4.continue和break

        break:立即跳出整个循环，即循环结束，开始执行循环后面的内容（直接跳到大括号）

        continue:立即跳出当前循环，继续下一次循环（跳到i++的地方）

        案例：

            求整数1～100的累加值，但要求碰到个位为3的数则停止累加
            求整数1～100的累加值，但要求跳过所有个位为3的数

4.布尔类型的隐式转换

    流程控制语句会把后面的值隐式转换成布尔类型

        转换为true   ---非空字符串  非0数字  true 任何对象
        转换成false  ---空字符串  0  false  null  undefined

        // 结果是什么？
        var a = !!'123';

