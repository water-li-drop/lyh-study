1.什么是函数

把一段相对独立的具有特定功能的代码块封装起来，形成一个独立实体，就是函数，起个名字（函数名），在后续开发中可以反复调用

函数的作用就是封装一段代码，将来可以重复使用

2.函数的定义

（1）函数声明

    function 函数名(){
    // 函数体
    }

（2）函数表达式

    var fn = function() {
    // 函数体
    }

（3）特点：

    函数声明的时候，函数体并不会执行，只要当函数被调用的时候才会执行。
    函数一般都用来干一件事情，需用使用动词+名词，表示做一件事情 `tellStory` `sayHello`等

3.函数的调用

（1）调用函数的语法：

    函数名();

（2）特点：

    函数体只有在调用的时候才会执行，调用需要()进行调用。
    可以调用多次(重复使用)

4.函数的参数

（1）语法：

    // 函数内部是一个封闭的环境，可以通过参数的方式，把外部的值传递给函数内部
    // 带参数的函数声明
    function 函数名(形参1, 形参2, 形参...){
    // 函数体
    }

    // 带参数的函数调用
    函数名(实参1, 实参2, 实参3);

（2）形参和实参

    1. 形式参数：在声明一个函数的时候，为了函数的功能更加灵活，有些值是固定不了的，对于这些固定不了的值。我们可以给函数设置参数。
       这个参数没有具体的值，仅仅起到一个占位置的作用，我们通常称之为形式参数，也叫形参。
    2. 实际参数：如果函数在声明时，设置了形参，那么在函数调用的时候就需要传入对应的参数，我们把传入的参数叫做实际参数，也叫实参。

    var x = 5, y = 6;
    fn(x,y); 
    function fn(a, b) {
    console.log(a + b);
    }
    //x,y实参，有具体的值。函数执行的时候会把x,y复制一份给函数内部的a和b，函数内部的值是复制的新值，无法修改外部的x,y

5.函数的返回值

    当函数执行完的时候，并不是所有时候都要把结果打印。我们期望函数给我一些反馈（比如计算的结果返回进行后续的运算），这个时候可以让函数返回一些东西。也就是返回值。函数通过return返回一个返回值

    返回值语法：

    //声明一个带返回值的函数
    function 函数名(形参1, 形参2, 形参...){
    //函数体
    return 返回值;
    }

    //可以通过变量来接收这个返回值
    var 变量 = 函数名(实参1, 实参2, 实参3);

    函数的调用结果就是返回值，因此我们可以直接对函数调用结果进行操作。

    返回值详解：
        如果函数没有显示的使用 return语句 ，那么函数有默认的返回值：undefined
        如果函数使用 return语句，那么跟再return后面的值，就成了函数的返回值
        如果函数使用 return语句，但是return后面没有任何值，那么函数的返回值也是：undefined
        函数使用return语句后，这个函数会在执行完 return 语句之后停止并立即退出，也就是说return后面的所有其他代码都不会再执行。

    推荐的做法是要么让函数始终都返回一个值，要么永远都不要返回值。


△arguments的使用

    JavaScript中，arguments对象是比较特别的一个对象，实际上是当前函数的一个内置属性。
    也就是说所有函数都内置了一个arguments对象，arguments对象中存储了传递的所有的实参。arguments是一个伪数组，因此及可以进行遍历