复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的,目的是为了可以选择更准确更精细的目标元素标签。

1.交集选择器

    交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为class选择器，两个选择器之间不能有空格，如h3.special。

    记忆技巧：

    交集选择器 是 并且的意思。  即...又...的意思

        比如：   p.one   选择的是： 类名为 .one  的 段落标签。  

    用的相对来说比较少，不太建议使用。

2.并集选择器

    并集选择器（CSS选择器分组）是各个选择器通过<strong style="color:#f00">逗号</strong>连接而成的，任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的CSS样式。
    记忆技巧：

    并集选择器  和 的意思，  就是说，只要逗号隔开的，所有选择器都会执行后面样式。

        比如  .one, p , #test {color: #F00;}  表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。  通常用于集体声明。

3.后代选择器

    后代选择器又称为包含选择器，用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。
    子孙后代都可以这么选择。 或者说，它能选择任何包含在内 的标签。 


4.子元素选择器

    子元素选择器只能选择作为某元素子元素的元素。其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个>进行连接，注意，符号左右两侧各保留一个空格。
    白话：  这里的子 指的是 亲儿子  不包含孙子 重孙子之类。
        比如：  .demo > h3 {color: red;}   说明  h3 一定是demo 亲儿子。  demo 元素包含着h3。

5.伪类选择器

   伪类选择器用于向某些选择器添加特殊的效果。比如给链接添加特殊效果， 比如可以选择 第1个，第n个元素。
   为了和我们刚才学的类选择器相区别，  类选择器是一个点 比如 .demo {}   而我们的伪类 用 2个点 就是 冒号  比如  :link{}

    链接伪类选择器

    - :link      /* 未访问的链接 */
    - :visited   /* 已访问的链接 */
    - :hover     /* 鼠标移动到链接上 */
    - :active    /* 选定的链接 */

    注意写的时候，他们的顺序尽量不要颠倒  按照  lvha 的顺序

        a {   /* a是标签选择器  所有的链接 */
                    font-weight: 700;
                    font-size: 16px;
                    color: gray;
                }
        a:hover {   /* :hover 是链接伪类选择器 鼠标经过 */
                    color: red; /*  鼠标经过的时候，由原来的 灰色 变成了红色 */
        }

6.伪元素---建议伪元素使用两个冒号(::)语法，而不是一个冒号 (:)，目的是为了区分伪类和伪元素
    (1)before
        所有主流浏览器都支持 ::before 伪元素。
      定义和用法
        ::before 伪元素在元素之前添加内容。
        这个伪元素允许创作人员在元素内容的最前面插入生成内容。默认地，这个伪元素是行内元素，不过可以使用属性 display 改变这一点。

        h1::before
        {
        content:url(logo.gif);
        }
    (2)after

        所有主流浏览器都支持 :after 伪元素。
      定义和用法
        :after 伪元素在元素之后添加内容。
        这个伪元素允许创作人员在元素内容的最后面插入生成内容。默认地，这个伪元素是行内元素，不过可以使用属性 display 改变这一点。
        h1:after
        {
        content:url(logo.gif);
        }

        △注:js操作伪元素--->使用DOM元素的data-*属性来更改content的值（这个方法我喜欢）
                            // CSS代码
                            .red::before {
                            content: attr(data-attr);
                            color: red;
                            }
                            // HTML代码
                            <div class="red" data-attr="red">内容内容内容内容</div>
                            // JacaScript代码
                            $('.red').attr('data-attr', 'green');





